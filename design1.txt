For this project I will use the ADT list to hold a collection of songs. 
These will be implemented using a Data structure of doubly linked nodes. Where each node points to the next item in the list
as well as pointing to the node that came before it.

For our data structure of doubly linked nodes we only need to be worried about two special cases
	The first being if our list is empty and we are trying to add a node, if our list has no nodes we simply
	need to add the new node to the list and have the index node point to it
	The second case we need to worry about is the removal of nodes this case is a bit more involved
	if we are removing our first node in the list we need to reset the pointers of the next node to point to the next item in the list
	if we are removing from the middle of our list we need to unlink the node we want to remove, and set the previous pointer of the current node
	to point to the item that comes before current and then the next pointer needs to point to the node after the current node.
	

To interact with the Data Structure the ADT will need the following functions:
  1. insert a function to insert a song into the list in a sorted way.
  2. append a function to insert a song into the end of our list
  3. printList a function to print all of the data in our list. This function will achieve this by recursively traversing the list and printint the data for each song
  4. printListByArtist a function to print all songs by a given artist in our list.
  5. isEmpty a function to check if our list is empty
  6. remove a function to remove a given node from our list
  7. removeByLikes a function to remove songs with less than m likes
  8. editLikes a function to edit the number of likes for a given song in our list
  9. findSongTitle a function to see if a song with a given title is in our list
  10. getFrequency a function to see how many songs have less than m likes in our list
  11. getSongAt a function to get a pointer to a song in our list by title.
  12. getSize a function to get the current number of songs in this list.
  13. loadFromFile a function to load song data from a CSV file.
  
  Each of the functions will report success or failure in the following ways:
  1. insert will return a boolean true or false. True if it was able to insert the node, false if else. This method will always return true because we allow duplicate entries.
  2. append will return a boolean true or false. True if it was able to add to the end of the list false if else.
  3. printList and printListByArtist will depend on the boolean flags from isEmpty and getSongAt
		printList will not proceed if isEmpty returns true, and printByArtist will not proceed if findSongTitle returns true.
  4. isEmpty will return a boolean value true if the list is empty false if else.
  5.remove will return a boolean flag true if it was able to remove the node false if else.
  6. removeByLikes will return a boolean flag true if there was any songs removed false if no songs were removed.
  7. editLikes will return a boolean flag, true if a song had its likes edited false if else.
  8. findSongTitle will return a boolean flag true if the song title is in our list false if else.
  9. getFrequency will return an integer 0 if no songs have less than m likes > 0 if there are songs with m likes in the list
  10. getSongAt will return a Boolean flag true if the song title is in the list false if else.
  11. getSize will return a number 0 if the list is empty >0 if list has data
  12. loadFromFile will return a number 0 if no songs were loaded from the file >0 if songs were loaded.
  
  Each of these functions is implemented to guard the data structure behind a wall these functions allow the client
  to request data out of the structure without having direct access to the entire structure
	1. insert guards our data structure by only taking in the new song we want to add from the client 
	    it then manages all the pointers in the list by linking the new node into the list based on its number of likes.
	2. append guards our data structure by again only taking a song object from the client
		it then links the new node into the end of the list. 
	3. printList gaurds the data structure by traversing the list for the client and printing 
	   each nodes data without letting the client access the node or telling where it is
	4. printByArtist gaurds the data structure by traversing the list and finding all the nodes with the matching artist name
		it then builds a temporary sorted list with the artist songs. 
	5. isEmpty gaurds by checking to see if the data structure is empty, without allowing
		the client to have direct access to the number of nodes in the list.
	6. remove gaurds by only being called by removeByLikes. removeByLikes must find the node and pass it in to be removed
		it then independently manages the links in the list 
	7. removeByLikes gaurds by only accepting the number of likes a song should be greater than
		it then traverses the list and finds the songs when they're found it calls the remove function which removes the node from the list.
	8. editLikes gaurds by only accepting the song title of the song we wish to edit
		and the new number of likes to set it to. It then updates that songs likes and builds a new sorted list to replace the current list (keeping it in order of song popularity)
	9. findSongTitle gaurds by allowing us to see if a song is present in the list by only allowing the client 
		to pass in the song title they wish to find.
	10. getFrequency gaurds the data structure by only taking in the number of likes to search for 
		it then traverses the list and counts the number that match the search target
	11. getSongAt gaurds the data structure by finding the node in the list and returning only that node,
		not giving the client any information about its place in the list or about any of the other nodes in the list.
	12. getSize gaurds the data structure by returning the size of the list
	13. loadFromFile gaurds by creating songs and inserting them into the list.
	
This programs recursive function is its printList function it will keep printing the songs data until the end of the list is reached
